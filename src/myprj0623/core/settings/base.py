"""
Django general settings for myprj0623 project.

Created from default settings.py (generated by 'django-admin startproject' using Django 4.1.3.) in order to change
setting according to current environment.
Protected info should be written in ".env" file. For more information, see comment in "SECRET_KEY."
"""
import os
from pathlib import Path

import environ
from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Modified base directory (created settings directory from settings.py)
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# ----- Setting by each environment -----
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-t)czkn+%4wp*bibp((%cdfx-h^sd=^a=kxf$0pumws-l)omxtb'
# Modified to read protected info from ".env" file
# ".env" file should be created in "pyprj0623" deirectory in every environment(server).
# To generate secret key for each environment file, open Python Console window and run these commands:
#     from django.core.management.utils import get_random_secret_key
#     print(get_random_secret_key())
#
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, '.env'))
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Modified debug flg
# DEBUG = True
DEBUG = False

# Modified to read protected info from ".env" file (located in "pyprj0623" deirectory in current environment(server))
# ALLOWED_HOSTS = []
ALLOWED_HOSTS_TMP = env.list('ALLOWED_HOSTS')
# ----------

# Application definition

INSTALLED_APPS = [
    # ==================================================
    #  Required Libraries (See "myprj0623 > requirements.txt")
    # ==================================================
    # 1. Django Essential libraries
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # ----- Additional Libraries -----
    # (Additional Django library) Used by DjangoAllauth
    'django.contrib.sites',
    # 2. Bootstrap5 (For Django)
    # NOTE: This is "bootstrap5(django-bootstrap-v5)", NOT "django_bootstrap5(django-bootstrap5)",
    "bootstrap5",
    # 3. Django datepicker for Bootstrap5
    "bootstrap_datepicker_plus",
    # 4. Django-crispy-forms
    'crispy_forms',
    # 5. Bootstrap5 template pack for Django-crispy-forms
    "crispy_bootstrap5",
    # NOTE: No need to add 'django-environ' here (Required library No.6)
    # 7. Django-allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # (Add next library here)
    # ----------
    # ==================================================
    # ----- My webapps -----
    'webapps.customallauth',
    'webapps.mainapp',
    # ----------
]

# ----- Used by Bootstrap5 for django.contrib.messages -----
MESSAGE_TAGS = {
    messages.INFO: 'alert alert-info',
    messages.SUCCESS: 'alert alert-success',
    messages.WARNING: 'alert alert-warning',
    messages.ERROR: 'alert alert-danger',
}
# ----------

# ----- Used by Bootstrap5 template pack for Django-crispy-forms -----
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
# ----------

# ----- Used by Django-allauth -----
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]
SITE_ID = 1
# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': '123',
            'secret': '456',
            'key': ''
        }
    }
}
# --- Custom Django-allauth setting ---
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_LOGOUT_ON_GET = True
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
LOGIN_REDIRECT_URL = 'mainapp:home'
ACCOUNT_LOGOUT_REDIRECT_URL = 'mainapp:welcome'
# ------
# Used by Django when you use your custom user instead of default Django user
AUTH_USER_MODEL = 'customallauth.CustomUser'
# Used by Django when you add login required decorator to your function views
# NOTE:
#  To use "next" page url parameter generated by Django (info of the page user came from) , custom allauth template
LOGIN_URL = 'mainapp:welcome'
# ----------

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Modify template files directories
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Modify static files directories
STATICFILES_DIRS = [
    # Common assets
    STATIC_URL,
    # Webapp assets
    os.path.join(BASE_DIR, STATIC_URL),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# NOTE: Set "IS_FIXTURE = True" when you run "python manage.py create_fixture_file_from_current_db_const" command
# IS_FIXTURE = True
IS_FIXTURE = False
